<?php


namespace app\author\controller;

use app\model\ArticleArticle;
use app\model\ArticleChapter;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\App;
use think\facade\View;

class Chapters extends Base
{
    protected $chapterModel;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->chapterModel = app('chapterModel');
    }

    public function list() {
        $book_id = input('articleid');
        View::assign('articleid', $book_id);
        return view();
    }

    public function getlist() {
        $book_id = input('articleid');
        $page = intval(input('page'));
        $limit = intval(input('limit'));
        $data = ArticleChapter::where('articleid','=',$book_id)->order('chapterorder', 'desc');
        $count = $data->count();
        $chapters = $data->limit(($page - 1) * $limit, $limit)->select();
        return json([
            'code' => 0,
            'msg' => '',
            'count' => $count,
            'data' => $chapters
        ]);
    }

    public function create() {
        if (request()->isPost()) {
            $data = request()->param();
            $chapter = new ArticleChapter();
            $result= $chapter->save($data);
            if ($result){
                $param = [
                    "id" => $data["articleid"],
                    "lastupdate" => time()
                ];
                $result2 = ArticleArticle::update($param);
                if ($result2) {
                    $file = App::getRootPath() . $data['cover'];
                    $bigId = floor((double)($chapter['articleid'] / 1000));
                    $filename = sprintf('/files/article/txt/%s/%s/%s.txt',
                        $bigId, $chapter['articleid'], $chapter['chapterid']);
                    copy($file, $filename);
                    unlink($file);
                    return json(['err' =>0,'msg'=>'添加成功']);
                } else {
                    return json(['err' =>1,'msg'=>'添加失败']);
                }
            }else{
                return json(['err' =>1,'msg'=>'添加失败']);
            }
        }
        $book_id = input('articleid');
        $lastChapterOrder = 0;
        $lastChapter = ArticleChapter::where('articleid','=',$book_id)
            ->order('chapterid','desc')->limit(1)->find();
        if ($lastChapter){
            $lastChapterOrder = $lastChapter->chapter_order;
        }
        View::assign([
            'book_id' => $book_id,
            'order' => $lastChapterOrder + 1,
        ]);
        return view();
    }

    public function edit() {
        $id = input('articleid');
        try {
            $chapter = ArticleChapter::findOrFail($id);
            if (request()->isPost()) {
                $chapter->chaptername = input('chapter_name');
                $chapter->chapterorder = input('chapter_order');
                $result = $chapter->save();
                if ($result) {
                    return json(['err' =>0,'msg'=>'编辑成功']);
                } else {
                    return json(['err' =>1,'msg'=>'编辑失败']);
                }
            } else {
                View::assign('chapter', $chapter);
                return view();
            }
        } catch (ModelNotFoundException $e) {
            abort(404);
        }
    }

    public function upload() {
        if (is_null(request()->file())) {
            return json([
                'code' => 1
            ]);
        } else {
            $cover = request()->file('file');
            $dir = 'files/tmp';
            $savename =str_replace ( '\\', '/',
                \think\facade\Filesystem::disk('public')->putFile($dir, $cover));
            return json([
                'code' => 0,
                'msg' => '',
                'txt' => '/static/upload/'.$savename
            ]);
        }
    }

    public function delete()
    {
        $id = input('chapterid');
        try {
            $chapter = ArticleChapter::findOrFail($id);
            $chapter->delete();
            return ['err'=>0,'msg'=>'删除成功'];
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function content(){
        $book_id = input('book_id');
        $chapter_id = input('chapter_id');
        $bigId = floor((double)($book_id / 1000));
        $file = sprintf('/files/article/txt/%s/%s/%s.txt',
            $bigId, $book_id, $chapter_id);
        $content = $this->getTxtcontent($this->server . $file);
    }

    private function getTxtcontent($txtfile)
    {
        $client = app('httpclient');
        $res = $client->request('GET', $txtfile); //读取版本号
        $contents = $res->getBody();
        $content = '';
        $encoding = mb_detect_encoding($contents, array('GB2312', 'GBK', 'UTF-16', 'UCS-2', 'UTF-8', 'BIG5', 'ASCII'));
        $arr = explode("\n", $contents);
        $arr = array_filter($arr); //数组去空
        foreach ($arr as $str) {
            if ($encoding != false) {
                $str = iconv($encoding, 'UTF-8', $str);
                if ($str != "" and $str != NULL) {
                    $content = $content . '<p>' .  $str. '</p>';
                }
            } else {
                $str = mb_convert_encoding($str, 'UTF-8', 'Unicode');
                if ($str != "" and $str != NULL) {
                    $content = $content . '<p>' .  $str. '</p>';
                }
            }
        }
        return $content;
    }
}