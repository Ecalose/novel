<?php


namespace app\mobile\controller;


use app\common\RedisHelper;
use app\model\UserFavor;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\facade\View;

class Users extends BaseUc
{
    protected $userService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->userService = app('userService');
    }

    public function ucenter()
    {
        View::assign([
            'header' => '用户中心'
        ]);
        return view($this->tpl);
    }

    public function userinfo()
    {
        if (request()->isPost()) {
            $nick_name = input('nick_name');
            $email = input('email');
            try {
                $this->user->name = $nick_name;
                $this->user->email = $email;
                $result = $this->user->save();
                if ($result) {
                    cookie('xwx_nick_name', $nick_name);
                    return json(['msg' => '修改成功', 'err' => 0]);
                } else {
                    return json(['msg' => '修改失败', 'err' => 1]);
                }
            } catch (DataNotFoundException $e) {
                return json(['msg' => '用户不存在', 'err' => 1]);
            } catch (ModelNotFoundException $e) {
                return json(['msg' => '用户不存在', 'err' => 1]);
            }
        } else {
            View::assign([
                'header' => '用户中心'
            ]);
        }
        return view($this->tpl);
    }

    public function bookshelf()
    {
        $data = $this->userService->getFavors($this->uid, $this->end_point);
        unset($data['page']['query']['page']);
        $param = '';
        foreach ($data['page']['query'] as $k => $v) {
            $param .= '&' . $k . '=' . $v;
        }
        View::assign([
            'books' => $data['books'],
            'page' => $data['page'],
            'param' => $param,
            'header' => '我的书架'
        ]);
        return view($this->tpl);
    }

    public function addfavor()
    {
        if (request()->isPost()) {
            $redis = RedisHelper::GetInstance();
            if ($redis->exists('favor_lock:' . $this->uid)) { //如果存在锁
                return json(['err' => 1, 'msg' => '操作太频繁']);
            } else {
                $redis->set('favor_lock:' . $this->uid, 1, 3); //写入锁
                $articleid = input('articleid');

                $where[] = ['articleid', '=', $articleid];
                $where[] = ['uid', '=', $this->uid];
                try {
                    UserFavor::where($where)->findOrFail();
                    return json(['err' => 1, 'msg' => '已加入书架']); //isfavor表示已收藏
                } catch (ModelNotFoundException $e) {
                    $userFaver = new UserFavor();
                    $userFaver->articleid = $articleid;
                    $userFaver->uid = $this->uid;
                    $userFaver->save();
                    return json(['err' => 0, 'msg' => '成功加入书架']); //isfavor表示已收藏
                }
            }
        }
        return json(['err' => 1, 'msg' => '不是post请求']);
    }

    public function delfavors()
    {
        $ids = explode(',', input('articleid')); //书籍id;
        $this->userService->delFavors($this->uid, $ids);
        return json(['err' => 0, 'msg' => '删除收藏']);
    }

    public function history()
    {
        View::assign([
            'header' => '阅读历史'
        ]);
        return view($this->tpl);
    }
}