<?php


namespace app\admin\controller;


use app\model\Book;
use app\model\Chapter;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\exception\ValidateException;
use think\facade\View;

class Chapters extends Base
{
    protected $chapterService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->chapterService = app('chapterService');
    }

    public function index()
    {
        $book_id = input('book_id');
        try {
            $book = Book::findOrFail(input('book_id'));
            $data = $this->chapterService->getChapters([
                ['book_id','=',$book_id]
            ]);
            View::assign([
                'chapters' => $data['chapters'],
                'count' => $data['count'],
                'book' => $book
            ]);
            return view();
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function create(){
        if (request()->isPost()) {
            $data = request()->param();
            $chapter = new Chapter();
            $dir = 'book/content';
            if (request()->file() != null) {
                $content= request()->file('content');
                try {
                    validate(['content' => 'fileExt:txt'])
                        ->check((array)$content);
                    $savename =str_replace ( '\\', '/',
                        \think\facade\Filesystem::disk('public')->putFile($dir, $content));
                    if (!is_null($savename)) {
                        $data['content_url'] = '/static/upload/'.$savename;
                    }
                } catch (ValidateException $e) {
                    abort(404, $e->getMessage());
                }
            }
            $result = $chapter->save($data);
            if ($result){
                $param = [
                    "id" => $data["book_id"],
                    "last_time" => time()
                ];
                $result2 = Book::update($param);
                if ($result2) {
                    $this->success('添加成功');
                } else {
                    $this->error('添加失败');
                }
            }else{
                $this->error('添加失败');
            }
        }

        $book_id = input('book_id');
        $lastChapterOrder = 0;
        $lastChapter = $this->chapterService->getLastChapter($book_id);
        if ($lastChapter){
            $lastChapterOrder = $lastChapter->chapter_order;
        }
        View::assign([
            'book_id' => $book_id,
            'order' => $lastChapterOrder + 1,
        ]);
        return view();
    }

    public function edit()
    {
        $id = input('id');
        try {
            $chapter = Chapter::findOrFail(input('id'));
            if (request()->isPost()) {
                $chapter->chapter_name = input('chapter_name');
                $chapter->chapter_order = input('chapter_order');
                if (request()->file() != null) {
                    $dir = 'book/content';
                    $content= request()->file('content');
                    try {
                        validate(['content' => 'fileExt:txt'])
                            ->check((array)$content);
                        $savename =str_replace ( '\\', '/',
                            \think\facade\Filesystem::disk('public')->putFile($dir, $content));
                        if (!is_null($savename)) {
                            $chapter['content_url'] = '/static/upload/'.$savename;
                        }
                    } catch (ValidateException $e) {
                        abort(404, $e->getMessage());
                    }
                }
                $result = $chapter->save();
                if ($result){
                    $param = [
                        "id" => $chapter["book_id"],
                        "last_time" => time()
                    ];
                    $result2 = Book::update($param);
                    if ($result2) {
                        $this->success('修改成功');
                    } else {
                        $this->error('修改失败');
                    }
                }else{
                    $this->error('修改失败');
                }

            }
            View::assign([
                'chapter' => $chapter,
            ]);
            return view();
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }

    public function delete()
    {
        $id = input('id');
        try {
            $chapter = Chapter::findOrFail($id);
            $chapter->delete();
            return ['err'=>0,'msg'=>'删除成功'];
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }

    }

    public function deleteAll(){
        $ids = input('ids');
        Chapter::destroy($ids);
    }

}