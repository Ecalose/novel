<?php


namespace app\admin\controller;


use app\model\Tags;
use app\service\TagsService;
use think\db\exception\DataNotFoundException;
use think\db\exception\ModelNotFoundException;
use think\exception\ValidateException;
use think\facade\Db;
use think\facade\View;

class Tag extends Base
{
    protected $tagsService;

    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->tagsService = app('tagsService');
    }

    public function index(){
        $data = $this->tagsService->getPagedAdmin();
        View::assign([
            'tags' => $data['tags'],
            'count' => $data['count']
        ]);
        return view();
    }

    public function create(){
        if (request()->isPost()) {
            $tag = new Tags();
            $tag->tag_name = input('tag_name');
            $tag->pinyin = input('pinyin');
            $tag->jianpin = input('jianpin');
            $tag->similar = input('similar');
            $tag->group = input('group');
            $result = $tag->save();
            if ($result) {
                return json(['err' =>0,'msg'=>'添加成功']);
            }else{
                return json(['err' =>1,'msg'=>'添加失败']);
            }
        }
        return view();
    }

    public function edit(){
        $id = input('id');
        try {
            $tag = Tags::findOrFail($id);
            if (request()->isPost()) {
                $tag->tag_name = input('tag_name');
                $tag->pinyin = input('pinyin');
                $tag->jianpin = input('jianpin');
                $tag->similar = input('similar');
                $tag->group = input('group');
                $result = $tag->save();
                if ($result) {
                    return json(['err' =>0,'msg'=>'修改成功']);
                }else{
                    return json(['err' =>1,'msg'=>'修改失败']);
                }
            }
            View::assign([
                'tag' => $tag,
            ]);
            return view();
        } catch (DataNotFoundException $e) {
            abort(404, $e->getMessage());
        } catch (ModelNotFoundException $e) {
            abort(404, $e->getMessage());
        }
    }
}